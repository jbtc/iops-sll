@model iOps.Core.Model.Flight

<script>
    $(function () {
        $('.date-picker').datepicker();
    })

    $(".Ajaxify").each(function (intIndex) {
        $(this).bind("click", function (e) {
            e.preventDefault();
            $.ajax({
                url: $(this).attr("href"),
                type: "GET",
                contentType: 'text/html',
                success: function (data) {
                    $('#FlightAdminData').html(data);
                }
            });
        });
    });

    $('#btnSubmit').click(function (event) {
        event.preventDefault();
        $('#btnSubmit').prop("disabled", true);
        $.ajax({
            type: "POST",
            url: '@Url.Action("Edit", "Flights", new { area = "Flights" })',
            data: $(this).closest("form").serialize(),
            dataType: "html",
            success: function (data) {
                $.ajax({
                    type: "GET",
                    url: '@Url.Action("Index", "Flights", new { area = "Flights" })',
                    contentType: 'text/html',
                    success: function (data) {
                        $('#btnSubmit').prop("disabled", false);
                        $('#FlightAdminData').html(data);
                    },
                    error: function (a, b, c) {
                        $('#btnSubmit').prop("disabled", false);

                    }
                });
            },
            error: function (a, b, c) {
                $('#btnSubmit').prop("disabled", false);

            }
        });
    });

    $(document).ready(function () {
        // Add Flight Tooltip
        $('.hasTooltip').kendoTooltip({
            position: "center",
            'text-indent': '-1000em',
            width: 120,
            position: 'top',
            beforeShow: function (e) {
                if (!$('#showTooltips').is(":checked")) {
                    e.preventDefault();
                }
            },
            show: function () {
                this.refresh();
            }
        });
    });

    // customize the _show method to call options.beforeShow 
    // to allow preventing the tooltip from being shown..
    kendo.ui.Tooltip.fn._show = function (show) {
        return function (target) {
            var e = {
                sender: this,
                target: target,
                preventDefault: function () {
                    this.isDefaultPrevented = true;
                }
            };

            if (typeof this.options.beforeShow === "function") {
                this.options.beforeShow.call(this, e);
            }
            if (!e.isDefaultPrevented) {
                // only show the tooltip if preventDefault() wasn't called..
                show.call(this, target);
            }
        };
    }(kendo.ui.Tooltip.fn._show);



</script>


<h2>Edit Flight - @Html.DisplayFor(model => model.FlightNumber)</h2>


@using (Html.BeginForm("Edit", "Flights", new { area = "Flights" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <table class="form-table">
            <tr style="display: none;">
                <td class="form-group"></td>
                <td>
                    <div class="col-md-10">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.Id)
                    </div>
                </td>
            </tr>
            <tr>
                <td class="form-group">
                    @Html.LabelFor(model => model.TimeStamp, htmlAttributes: new { @class = "control-label col-md-2" })
                </td>
                <td>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.TimeStamp, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.TimeStamp, "", new { @class = "text-danger" })
                    </div>
                </td>
            </tr>
            <tr>
                <td class="form-group">
                    @Html.LabelFor(model => model.AircraftType, htmlAttributes: new { @class = "control-label col-md-2" })
                </td>
                <td>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.AircraftType, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.AircraftType, "", new { @class = "text-danger" })
                    </div>
                </td>
            </tr>
            <tr>
                <td class="form-group">
                    @Html.LabelFor(model => model.AircraftSubType, htmlAttributes: new { @class = "control-label col-md-2" })
                </td>
                <td>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.AircraftSubType, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.AircraftSubType, "", new { @class = "text-danger" })
                    </div>
                </td>
            </tr>
 
            <tr>
                <td class="form-group">
                    @Html.LabelFor(model => model.Airline, htmlAttributes: new { @class = "control-label col-md-2" })
                </td>
                <td>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Airline, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Airline, "", new { @class = "text-danger" })
                    </div>
                </td>
            </tr>
            <tr>
                <td class="form-group">
                    @Html.LabelFor(model => model.FlightNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                </td>
                <td>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.FlightNumber, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.FlightNumber, "", new { @class = "text-danger" })
                    </div>
                </td>
            </tr>
            <tr>
                <td class="form-group">
                    @Html.LabelFor(model => model.ArrivalAirport, htmlAttributes: new { @class = "control-label col-md-2" })
                </td>
                <td>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ArrivalAirport, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ArrivalAirport, "", new { @class = "text-danger" })
                    </div>
                </td>
            </tr>
            <tr>
                <td class="form-group">
                    @Html.LabelFor(model => model.DepartureAirport, htmlAttributes: new { @class = "control-label col-md-2" })
                </td>
                <td>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.DepartureAirport, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.DepartureAirport, "", new { @class = "text-danger" })
                    </div>
                </td>
            </tr>
            <tr>
                <td class="form-group">
                    @Html.LabelFor(model => model.OnBoardActualTime, htmlAttributes: new { @class = "control-label col-md-2 date-picker" })
                </td>
                <td>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.OnBoardActualTime, new { htmlAttributes = new { @class = "form-control date-picker" } })
                        @Html.ValidationMessageFor(model => model.OnBoardActualTime, "", new { @class = "text-danger" })
                    </div>
                </td>
            </tr>
            <tr>
                <td class="form-group">
                    @Html.LabelFor(model => model.OnBoardScheduledTime, htmlAttributes: new { @class = "control-label col-md-2 date-picker" })
                </td>
                <td>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.OnBoardScheduledTime, new { htmlAttributes = new { @class = "form-control date-picker" } })
                        @Html.ValidationMessageFor(model => model.OnBoardScheduledTime, "", new { @class = "text-danger" })
                    </div>
                </td>
            </tr>
            <tr>
                <td class="form-group">
                    @Html.LabelFor(model => model.OnBoardEstimatedTime, htmlAttributes: new { @class = "control-label col-md-2 date-picker" })
                </td>
                <td>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.OnBoardEstimatedTime, new { htmlAttributes = new { @class = "form-control date-picker" } })
                        @Html.ValidationMessageFor(model => model.OnBoardEstimatedTime, "", new { @class = "text-danger" })
                    </div>
                </td>
            </tr>
            <tr>
                <td class="form-group">
                    @Html.LabelFor(model => model.OnBoardTouchDownTime, htmlAttributes: new { @class = "control-label col-md-2 date-picker" })
                </td>
                <td>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.OnBoardTouchDownTime, new { htmlAttributes = new { @class = "form-control date-picker" } })
                        @Html.ValidationMessageFor(model => model.OnBoardTouchDownTime, "", new { @class = "text-danger" })
                    </div>
                </td>
            </tr>
            <tr>
                <td class="form-group">
                    @Html.LabelFor(model => model.PassengerGate, htmlAttributes: new { @class = "control-label col-md-2" })
                </td>
                <td>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.PassengerGate, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.PassengerGate, "", new { @class = "text-danger" })
                    </div>
                </td>
            </tr>
            <tr>
                <td class="form-group">
                    @Html.LabelFor(model => model.ParkingPosition, htmlAttributes: new { @class = "control-label col-md-2" })
                </td>
                <td>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ParkingPosition, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ParkingPosition, "", new { @class = "text-danger" })
                    </div>
                </td>
            </tr>
            <tr>
                <td class="form-group">
                    @Html.LabelFor(model => model.BridgeUpdateDateTime, htmlAttributes: new { @class = "control-label col-md-2" })
                </td>
                <td>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.BridgeUpdateDateTime, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.BridgeUpdateDateTime, "", new { @class = "text-danger" })
                    </div>
                </td>
            </tr>
            <tr>
                <td class="form-group">
                    @Html.LabelFor(model => model.DoorPosition, htmlAttributes: new { @class = "control-label col-md-2" })
                </td>
                <td>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.DoorPosition, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.DoorPosition, "", new { @class = "text-danger" })
                    </div>
                </td>
            </tr>
            <tr>
                <td class="form-group">
                    @Html.LabelFor(model => model.AC_Door_AVG_HT, htmlAttributes: new { @class = "control-label col-md-2" })
                </td>
                <td>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.AC_Door_AVG_HT, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.AC_Door_AVG_HT, "", new { @class = "text-danger" })
                    </div>
                </td>
            </tr>
            <tr>
                <td class="form-group">
                    @Html.LabelFor(model => model.AC_DRIVE_COL_HT, htmlAttributes: new { @class = "control-label col-md-2" })
                </td>
                <td>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.AC_DRIVE_COL_HT, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.AC_DRIVE_COL_HT, "", new { @class = "text-danger" })
                    </div>
                </td>
            </tr>
            <tr>
                <td class="form-group">
                    @Html.LabelFor(model => model.RTUOnIndicator, htmlAttributes: new { @class = "control-label col-md-2" })
                </td>
                <td>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.RTUOnIndicator, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.RTUOnIndicator, "", new { @class = "text-danger" })
                    </div>
                </td>
            </tr>
            <tr>
                <td class="form-group">
                    @Html.LabelFor(model => model.RTURemoteCntrl, htmlAttributes: new { @class = "control-label col-md-2" })
                </td>
                <td>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.RTURemoteCntrl, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.RTURemoteCntrl, "", new { @class = "text-danger" })
                    </div>
                </td>
            </tr>
        </table>
    </div>


    <div id="Navigation-Buttons">
        <p>
            <input type="button" class="BackToList Ajaxify hasTooltip" value="Back to List" title="Go back to the flight list" href='@Url.Action("Index", "Flights", new { area = "Flights" })' />&nbsp;&nbsp;
            <input type="button" class="FlightDeleteButton Ajaxify hasTooltip" value="Delete Flight" title="Delete the current flight" href='@Url.Action("Delete", "Flights", new { area = "Flights", id = Model.Id })' />&nbsp;&nbsp;
            <input type="button" class="FlightUndoButton Ajaxify hasTooltip" value="Undo Changes" title="Undo the current Changes" href='@Url.Action("Edit", "Flights", new { area = "Flights", id = Model.Id })' />&nbsp;&nbsp;
            <button id="btnSubmit" class="FlightSaveButton hasTooltip" title="Save the current flight" onclick="return false;">Save Changes</button>
        </p>
    </div>
}



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
