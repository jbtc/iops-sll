<script>

    function get_value(tag) {
        var tagTemp = tag + (tag.endsWith(".Value") ? "" : ".Value");
        if (!OPC.tags[tagTemp.replace(".Value", "")].props["Value"].quality) {
            return null;
        }
        return OPC.get_value(tagTemp);
    }

    function get_bool(tag) {
        var tagTemp = tag + (tag.endsWith(".Value") ? "" : ".Value");
        if (!OPC.tags[tagTemp.replace(".Value", "")].props["Value"].quality) {
            return null;
        }

        var b = OPC.get_value(tagTemp);
        if (b && b == "True") return true;
        if (b && b == "False") return false;
        return null;
    }

    // display plane and color overlay for gate based on tags
    function check_gate_images(zone, gate) {
        var pre = OPC_config.tag_prefix + "Zone" + zone + "." + "GateC" + gate + ".";
        var show_ac = get_bool(pre + "PBB.AIRCRAFTDOCKEDCALCULATION.Value");            // aircraft is docked
        var show_nc = false;              // show Not Connected (still need to determine how to define this logically)
        var show_g = get_bool(pre + "PBB.PBB_IN_OPER_MODE.Value");              // show green
        var show_y = get_bool(pre + "PBB.Warning._HasWarnings.Value");        // show yellow
        var show_o = get_bool(pre + "PBB.AUTOLEVELING.Value") || parseInt(get_value(pre + "GPU.RVOUTAVG.Value"))>0;             // show orange
        var show_r = get_bool(pre + "PBB.Alarm._HasAlarms.Value");              // show red

        $("#g" + gate + "_r").toggle(false);
        $("#g" + gate + "_y").toggle(false);
        $("#g" + gate + "_o").toggle(false);
        $("#g" + gate + "_g").toggle(false);
        $("#g" + gate + "_idle").toggle(false);
        $("#g" + gate + "_bq").toggle(false);
        $("#g" + gate + "_nc").toggle(true);

        if (show_ac != null && show_nc != null && show_g != null && show_y != null && show_o != null && show_r != null) {
            $("#g" + gate + "_ac").toggle(show_ac);
            $("#g" + gate + "_nc").toggle(false);
            switch (true) {
                case show_nc:
                    break;
                case show_r:
                    $("#g" + gate + "_r").toggle(true);
                    break;
                case show_y:
                    $("#g" + gate + "_y").toggle(true);
                    break;
                case show_o:
                    $("#g" + gate + "_o").toggle(true);
                    break;
                case show_g:
                    $("#g" + gate + "_g").toggle(true);
                    break;
                default:
                    $("#g" + gate + "_idle").toggle(true);
                    break;
            }
        }
        else
        {
            $("#g" + gate + "_nc").toggle(false);
            $("#g" + gate + "_bq").toggle(true);
        }
    }

    function opc_callback(data) {
        // run thru all the gates updating images
        for (var i=0; i<@TempData["CIDMaxScreens"]; i++) {
            if(i!='2'){
                check_gate_images("1", i+1);
            }
        }
    }

    $(document).ready(function () {
        $('#gateLinkid').css('visibility', 'hidden');
        $("#AirportWindow").kendoWindow({
            title: "CID - Airport Overview",
            draggable: false,
            modal: false,
            width: $("#splitter").width() - 244,
            height: $(".splitter-main").height() - 33,
            position: {
                top: $("#Header").height() + 2,
                left: 246
            },
            resizable: false
        });

        //removes all buttons from kendo window
        $('.k-window-titlebar').find('.k-window-actions').css('visibility', 'hidden');

        //delete the SignIn kendoWindow once loaded
        if ($('#pageData').is(':visible')) {
            $('#pageData').data('kendoWindow').destroy();
        };

        //if the splitter is already collapsed, expand the main window
        if ($('.splitter-stats').width() < 200) {
            $('body').find('.k-window').css('width', '+=200');
            $('body').find('.k-window').css('left', '-=200');
        };

        function update_alarms() {
            var PriorityCol = -1;
            PriorityCol = $('#GateAlarmWindow th:contains("Priority")').index();
            if (PriorityCol > -1) {
                $('#GateAlarmWindow tr').not('thead tr').each(function (idx, row) {
                    var cellData = $(this).find('td').eq(PriorityCol)[0].innerText;
                    $('#GateAlarmWindow th:contains("Priority")').hide();
                    $(this).find('td').eq(PriorityCol).hide();
                    switch (cellData) {
                        case '0':
                            $(this).addClass("WarningRow");
                            break;
                        case '100':
                            $(this).addClass("AlarmRow");
                            break;
                        default:
                            break;
                    }
                });
            }
        };

        var tags = [];

        // set up gate prefix
        OPC.tags = [];
        OPC_config.watch_tags = [];
        OPC_config.tag_prefix = '\\\\opc.iopsnow.com\\RemoteSCADAHosting.Airport-CID.Airport.CID.Term1.';
        OPC_config.refresh_callback = opc_callback;
        OPC_config.watch_tags = tags;
        //OPC_config.callback_timeout = 5000;
        OPC_config.alarm_bindings = [
            {
                alarmid: "GateAlarms",
                callback: update_alarms,
                showInfo: true,
                showHistory: false,
                pagination: true,
                pageLength: 10,
                networkNodes: ["RemoteSCADAHosting.localhost.RemoteSCADAHost.Airport-CID"],
                filter: {
                    alarmtypes: ["Digital"],
                    alarmgroups: ["C1_PBB_ALARMS", "C2_PBB_ALARMS", "C4_PBB_ALARMS", "C5_PBB_ALARMS", "C6_PBB_ALARMS",
                                 "C1_GPU_ALARMS", "C2_GPU_ALARMS", "C4_GPU_ALARMS", "C5_GPU_ALARMS", "C6_GPU_ALARMS",
                                 "C1_PCA_ALARMS", "C2_PCA_ALARMS", "C4_PCA_ALARMS", "C5_PCA_ALARMS", "C6_PCA_ALARMS"]
                },
                columns: [
                    { name: "AlarmID", text: "Alarm ID", type: "string", visible: false },
                    { name: "AlarmDateTime", text: "Alarm Date/Time", type: "datetime", visible: true, sort: 'desc', width: '130px', searchable: false },
                    { name: "Active", text: "Active", type: "boolean", visible: true, width: '50px', align: 'center' },
                    { name: "AlarmValue", text: "Alarm Value", type: "string", visible: false, align: 'right' },
                    { name: "Text", text: "Text", type: "string", visible: true },
                    { name: "AlarmType", text: "Alarm Type", type: "string", visible: true },
                    { name: "Priority", text: "Priority", type: "string", visible: true, width: '50px', align: 'right' }
                ]
            }
        ];

        var max = parseInt(@TempData["CIDMaxScreens"]);
        for (var g =1; g<max; g++) {
            if(g!=3){
                var pre = "Zone1.GateC" + parseInt(g) + ".";
                tags.push(pre + "PBB.AIRCRAFTDOCKEDCALCULATION.Value");                  // aircraft is docked
                tags.push(pre + "PBB.AUTOLEVELKEY.Value");                  // show green
                tags.push(pre + "PBB.OPERATEKEY.Value");                  // show green
                tags.push(pre + "PBB.PBB_IN_OPER_MODE.Value");                  // show green
                tags.push(pre + "PBB.Warning._HasWarnings.Value");            // show yellow
                tags.push(pre + "PBB.AUTOLEVELING.Value");                 // show orange
                tags.push(pre + "PBB.AUTOLEVELMODEFLAG.Value");                 // show orange
                tags.push(pre + "GPU.RVOUTAVG.Value");                 // show orange
                tags.push(pre + "PBB.Alarm._HasAlarms.Value");                     // show red
            }
        };

        OPC.init(); //required for ajax calls in OPC
    });

    function CloseKendoAirport() {
        if ($('#AirportWindow').is(':visible')) {
            $('#AirportWindow').data('kendoWindow').destroy();
        }
    }

    function GoZone(zoneNumber,icon) {
        $.ajax({
            url: 'Zones/Zones/ShowJFKZone',
            type: "GET",
            data: {
                zoneNum: zoneNumber
            },
            contentType: 'text/html',
            success: function (data) {
                CloseKendoAirport();
                $('#main-body').html(data);
                //ChangeIcons2(icon);
                ChangeIcons(icon);
            }
        })
    }

    function GoZoneGate(zoneNumber, gateNumber,icon) {
        $.ajax({
            url: 'Gate/Gate/ShowGates',
            type: "GET",
            data: {
                zoneNum: zoneNumber,
                gateNum: gateNumber
            },
            contentType: 'text/html',
            success: function (data) {
                CloseKendoAirport();
                $('#main-body').html(data);
                //ChangeIcons2(icon);
                ChangeIcons(icon);
            }
        })
    }

    function GoGate(gateNumber) {
        $.ajax({
            url: 'Gate/Gate/ShowGates',
            type: "GET",
            data: {
                gateNum: gateNumber
            },
            contentType: 'text/html',
            success: function (data) {
                CloseKendoAirport();
                $('#main-body').html(data);
                //ChangeIcons2(gateNumber);
                ChangeIcons(gateNumber);
            }
        })
    }
</script>

<input type="hidden" id="txtScreenNumber" value='@TempData["CIDMaxScreens"]' />
<div id="AirportWindow" class="Window-Container Airport-Window">
    <div id="gates_container">
        <!-- terminal and gates -->
        <img id="building" class="img" />
        <div id="GateAlarmWindow" style="position: absolute; top: 69%; left: 70%; height: 8%; width: 30%;">
            <div id="GateAlarms" style="height:100%; width: 100%"></div>
        </div>
       <!-- gate alarm color overlays  -->
        @for (var a = 1; a <= (int)TempData["CIDMaxScreens"] - 1; a++)
        {
            <img id="g@(a)_ac" class="img" style="display:none;" />
            <img id="g@(a)_idle" class="img status" style="display:none;" />
            <img id="g@(a)_bq" class="img status" style="display:none;" />
            <img id="g@(a)_g" class="img status" style="display:none;" />
            <img id="g@(a)_y" class="img status" style="display:none;" />
            <img id="g@(a)_o" class="img status" style="display:none;" />
            <img id="g@(a)_r" class="img status" style="display:none;" />
        }

        <!-- gate links  -->
        @for (var a = 1; a <= (int)TempData["CIDMaxScreens"] - 1; a++)
        {
            <a id='gate@(a)' class="gate_link" onclick='GoZoneGate("1","@(a)",@(a+1))'>Gate @a</a>
        }

        <div id="GateAlarmWindow" style="position: absolute; top: 69%; left: 70%; height: 8%; width: 30%;">
            <div id="GateAlarms" style="height:100%; width: 100%"></div>
        </div>
     </div>
</div>
